# NAME

DBIx::Yakinny -

# SYNOPSIS

    package MyApp::DB::Schema;
    use base qw/DBIx::Yakinny::Schema/;

    __PACKAGE__->register_table(
        class   => 'MyApp::DB::User',
        table   => 'user',
        columns => [qw/user_id name email/],
        pk      => 'user_id',
    );

    package MyApp::DB::User;
    use base qw/DBIx::Yakinny::Row/;

    package main;
    use MyApp::DB::Schema;
    use DBIx::Yakinny::Schema;
    use DBI;

    my $dbh = DBI->connect(...);
    my $db = DBIx::Yakinny->new(
        dbh     => $dbh,
        schemas => 'MyApp::DB::Schema',
    );
    $db->dbh; # => #dbh
    my $user = $db->insert('user' => {name => 'john', email => 'john@exapmle.com'});
    say $user->name; # => john
    $user->name('mark');
    $user->update;
    $user->delete();

    my @users = $db->search_by_sql('user' => q{SELECT * FROM user WHERE name LIKE 'dai%'});

    my $user = $db->single('user' => {user_id => 3});
    my $iter = $db->search('user' => {user_id => 3});
    my @users = $db->search('user' => {user_id => 3});

# DESCRIPTION

DBIx::Yakinny is yet another O/R mapper based on Active Record strategy.

# FAQ

- How do you use trigger like Class::DBI?

You should use trigger on RDBMS layer. It is reliable.

- How do you use inflate/deflate?

This module does not support it.

# AUTHOR

Tokuhiro Matsuno <tokuhirom AAJKLFJEF GMAIL COM>

# SEE ALSO

# LICENSE

Copyright (C) Tokuhiro Matsuno

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.