# NAME

DBIx::Kohada - ActiveRecord

# SYNOPSIS

    package MyApp::DB::Row::User;
    use parent qw/DBIx::Kohada::Row/;
    __PACKAGE__->set_table('user');
    __PACKAGE__->set_primary_key('user_id');
    __PACKAGE__->add_column($_) for qw/user_id name email/;

    package main;
    use DBIx::Kohada::Schema;
    use DBIx::Kohada;
    use DBI;

    my $schema = DBIx::Kohada::Schema->new();
    $schema->register_row_class('MyApp::DB::Row::User');

    my $dbh = DBI->connect('dbi:SQLite:');
    my $db = DBIx::Kohada->new(
        dbh    => $dbh,
        schema => $schema,
    );
    $db->dbh; # => #dbh
    my $user = $db->insert('user' => {name => 'john', email => 'john@exapmle.com'});
    say $user->name; # => john
    $user->name('mark');
    $user->update;
    $user->delete();

    my @users = $db->search_by_sql('user' => q{SELECT * FROM user WHERE name LIKE 'dai%'});

    my $user = $db->single('user' => {user_id => 3});
    my $iter = $db->search('user' => {user_id => 3});
    my @users = $db->search('user' => {user_id => 3});

# DESCRIPTION

DBIx::Kohada is yet another O/R mapper based on Active Record strategy.

# WHY ANOTHER ONE?

I had using [Class::DBI](http://search.cpan.org/perldoc?Class::DBI), [DBIx::Class](http://search.cpan.org/perldoc?DBIx::Class), and [DBIx::Skinny](http://search.cpan.org/perldoc?DBIx::Skinny). But the three O/R Mappers are not enough for me.

# FAQ

- How do you use tracer like DBIx::Skinny::Profiler::Trace?

You can use tracer by DBI. And you can use the advanced tracer like this article: [http://d.hatena.ne.jp/tokuhirom/20101201/1291196584](http://d.hatena.ne.jp/tokuhirom/20101201/1291196584).

- How do you use relationships?

It is not supported in core. You can write a plugin to do it.

- How do you handle reconnect?

use [DBIx::Connector](http://search.cpan.org/perldoc?DBIx::Connector).

- How do you use nested transaction?

use [DBIx::Kohada::Plugin::TransactionManager](http://search.cpan.org/perldoc?DBIx::Kohada::Plugin::TransactionManager).

- How do you use on_connect_do like DBIC?

use $dbh->{Callbacks}->{connected}.

- How do you use display the profiling result like [DBIx::Skinny::Profiler](http://search.cpan.org/perldoc?DBIx::Skinny::Profiler)?

use [Devel::KYTProf](http://search.cpan.org/perldoc?Devel::KYTProf).

- How do you display pretty error message?

use DBI's callback functions. fore modetails, see eg/dbi-callback.pl.

- How do you load child classes automatically?

use [Module::Find](http://search.cpan.org/perldoc?Module::Find).

    use Module::Find;
    my $schema = DBIx::Kohada::Schema->new();
    $schema->register_row_class($_) for useall "MyApp::DB::Row";

- How do you handle utf8 columns?

You should use __mysql_enable_utf8__, __sqlite_unicode__, etc.

- Why don't you implement 'find_or_create' method?

It is not atomic operation. It makes issue at somtime.

- How do you inflate by rule like DBIx::Skinny?

You can use following snipet code.

    for my $table ($schema->tables()) {
        my $row_classs = $schema->table_name2row_class($table->name);
        for my $column ($table->columns()) {
            if ($column eq 'ctime') {
                $row_class->set_inflation_rule(
                    $column => sub { Time::Piece->new($_[0]) }
                );
                $row_class->set_deflation_rule(
                    $column => sub { $_[0]->epoch }
                );
            }
        }
    }

# AUTHOR

Tokuhiro Matsuno <tokuhirom AAJKLFJEF GMAIL COM>

# SEE ALSO

# LICENSE

Copyright (C) Tokuhiro Matsuno

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.